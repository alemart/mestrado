// -------------------------------
// canvas program
// -------------------------------
window.root = new Group(); // root scene node

var canvas = new Group(); // drawing board (root.firstChild)
var sweetSpot = new Group(); // sweet spot

root.addChild(canvas);
root.addChild(sweetSpot);







function onFrame(event)
{
    canvas.sendToBack();

    // filter markers, erasers and fingers
    var markers = [], erasers = [], fingers = [];
    var wlist = wall.objects();
    for(var k in wlist) {
        var wo = wlist[k];

        if(wo.type().match(/^marker_/))
            markers.push(wo);
        else if(wo.type() == 'eraser')
            erasers.push(wo);
        else if(wo.type() == 'finger')
            fingers.push(wo);
    }

    // process everything
    $.each(markers, function(idx, obj) { handleMarker(obj); });
    $.each(erasers, function(idx, obj) { handleEraser(obj); });
    if(fingers.length == 1)
        handleFingers(fingers[0], null);
    else if(fingers.length >= 2)
        handleFingers(fingers[0], fingers[1]);
    else
        handleFingers(null, null);
}






// -------------------------------
// Tool handling
// -------------------------------



var pathOf = { }; // helper hash: <id, path>
function handleMarker(marker)
{
    var id = marker.id();
    var pos = wall.i2w(marker.x(), marker.y()); // position in pixels

    if(!(id in pathOf)) {
        pathOf[id] = new Path();
        pathOf[id].strokeColor = marker.color();
        pathOf[id].strokeWidth = 10;
        canvas.addChild(pathOf[id]);
    }
    pathOf[id].add(pos);
    pathOf[id].smooth();

    //cursors.addAt(pos.x, pos.y);
}




function handleEraser(eraser)
{
    var radius = 100;
    var pos = wall.i2w(eraser.x(), eraser.y());

    canvas.addChild(new Path.Circle({ // FIXME: is this efficient?
        center: pos,
        radius: radius,
        fillColor: $('html').css('backgroundColor')
    }));

    cursors.addAt(pos.x, pos.y, '#fff', radius);
}




var lastFinger1 = null, lastFinger2 = null, lastDistance = 1;
function handleFingers(finger1, finger2)
{
    var pos1 = finger1 ? wall.i2w(finger1.x(), finger1.y()) : null;
    var pos2 = finger2 ? wall.i2w(finger2.x(), finger2.y()) : null;

    if(finger1 && !finger2) {
        // TRANSLATION
        if(lastFinger1 && lastFinger1.id() == finger1.id()) {
            var lastPos1 = wall.i2w(lastFinger1.x(), lastFinger1.y());
            var delta = new Point(pos1) - new Point(lastPos1);
            canvas.position += delta;
        }

        cursors.addAt(pos1.x, pos1.y);
    }
    else if(finger1 && finger2) {
        // SCALE
        var distance = new Point(pos1).getDistance(new Point(pos2));
        if(lastFinger2) {
            var delta = distance / lastDistance;
            canvas.scale(delta);
        }
        lastDistance = distance;

        cursors.addAt(pos1.x, pos1.y);
        cursors.addAt(pos2.x, pos2.y);
    }

    lastFinger1 = finger1;
    lastFinger2 = finger2;
}





// -------------------------------
// sweet spot
// -------------------------------

// compute vertices (in pixel coords)
var topleft = wall.i2w(0, 0);
var topright = wall.i2w(1, 0);
var bottomright = wall.i2w(1, 1);
var bottomleft = wall.i2w(0, 1);

// render it!
var width = 0*10, color = '#fff';
sweetSpot.addChild(new Path.Line({from: topleft, to: topright, strokeColor: color, strokeWidth: width}));
sweetSpot.addChild(new Path.Line({from: topright, to: bottomright, strokeColor: color, strokeWidth: width}));
sweetSpot.addChild(new Path.Line({from: bottomright, to: bottomleft, strokeColor: color, strokeWidth: width}));
sweetSpot.addChild(new Path.Line({from: bottomleft, to: topleft, strokeColor: color, strokeWidth: width}));
sweetSpot.bringToFront();
